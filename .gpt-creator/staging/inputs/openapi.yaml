openapi: 3.0.3
info:
  title: GPT-Review Orchestration API
  version: 1.0.0
  description: |
    Conceptual REST interface that mirrors the GPT-Review CLI behaviour. It allows
    external automation to start review sessions, stream model patches, run commands,
    and inspect logs generated by the orchestrator or API driver.
servers:
  - url: https://api.gpt-review.local/v1
paths:
  /sessions:
    post:
      summary: Create a review session
      description: >-
        Start a new GPT-Review session using either browser or API transport.
        The server clones the repository (if remote), generates blueprint docs,
        and returns a session identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400': { $ref: '#/components/responses/BadRequest' }
  /sessions/{session_id}:
    get:
      summary: Fetch session state
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404': { $ref: '#/components/responses/NotFound' }
  /sessions/{session_id}/patches:
    post:
      summary: Submit a model patch result
      description: >-
        Register a single-file patch produced by the language model. The server
        validates the payload, applies it via the patch pipeline, commits the change,
        and optionally runs the configured command.
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPayload'
      responses:
        '202':
          description: Patch accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchResult'
        '409':
          description: Patch rejected because of validation failure or dirty workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchError'
  /sessions/{session_id}/commands:
    post:
      summary: Execute run/test command
      description: >-
        Trigger the configured run command (e.g., `pytest -q`). The response
        includes exit status and tail output used for model feedback.
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                override:
                  type: string
                  description: Override command to run for this execution only.
      responses:
        '200':
          description: Command executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResult'
  /sessions/{session_id}/logs:
    get:
      summary: Retrieve recent wrapper/orchestrator logs
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - name: tail
          in: query
          schema:
            type: integer
            default: 2000
          description: Maximum characters of log tail to return.
      responses:
        '200':
          description: Log tail
          content:
            application/json:
              schema:
                type: object
                properties:
                  stdout:
                    type: string
                  stderr:
                    type: string
components:
  parameters:
    SessionId:
      name: session_id
      in: path
      required: true
      schema:
        type: string
      description: Unique session identifier.
  responses:
    BadRequest:
      description: Invalid payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Session not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    CreateSessionRequest:
      type: object
      required: [instructions_path, repo]
      properties:
        instructions_path:
          type: string
          description: >-
            Absolute or relative path to a plain-text instructions file accessible
            to the orchestration service.
        repo:
          type: string
          description: Git repository path or clone URL.
        mode:
          type: string
          enum: [browser, api]
          default: browser
        model:
          type: string
          description: Model identifier when using API mode (e.g., gpt-5-codex).
        run_command:
          type: string
          description: Command executed after each patch (`pytest -q`).
        auto_continue:
          type: boolean
          description: Automatically send "continue" instead of waiting for user input.
    Session:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [pending, running, awaiting_model, awaiting_user, completed, failed]
        mode:
          type: string
        current_iteration:
          type: integer
        run_command:
          type: string
        branch_prefix:
          type: string
        remote:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PatchPayload:
      type: object
      required: [op, file, status]
      properties:
        op:
          type: string
          enum: [create, update, delete, rename, chmod]
        file:
          type: string
          description: Repo-relative POSIX path.
        body:
          type: string
          description: Full file contents for create/update operations.
        body_b64:
          type: string
          description: Base64-encoded bytes for binary operations.
        target:
          type: string
          description: New path when op is rename.
        mode:
          type: string
          description: Octal mode (`644`, `755`).
        status:
          type: string
          enum: [in_progress, completed]
    PatchResult:
      type: object
      properties:
        commit_sha:
          type: string
        command_triggered:
          type: boolean
        command_exit_code:
          type: integer
          nullable: true
        command_tail:
          type: string
          description: Tail of command output returned to the model.
    PatchError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            reasons:
              type: array
              items:
                type: string
    CommandResult:
      type: object
      properties:
        exit_code:
          type: integer
        tail:
          type: string
        duration_seconds:
          type: number
          format: float
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
