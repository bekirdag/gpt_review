# =============================================================================
# GPT‚ÄëReview ‚ñ∏ End‚Äëto‚ÄëEnd Smoke Test
# =============================================================================
#
# Purpose
# -------
# * Launch a **real headless Chrome** via Selenium to guarantee that:
#     ‚Ä¢ `webdriver-manager` can download a matching chromedriver
#     ‚Ä¢ The helper `_chrome_driver()` returns a usable driver
# * Add resilience + observability:
#     ‚Ä¢ Cache webdriver-manager downloads
#     ‚Ä¢ Retry browser launch on transient failures
#     ‚Ä¢ Append a compact, useful Job Summary
#
# Triggers
# --------
# * Runs on pull‚Äërequests and pushes to `main`.
#
# Notes
# -----
# ‚Ä¢ We install **Google Chrome Stable** using `browser-actions/setup-chrome`.
# ‚Ä¢ Headless "new" mode does not require X11, but we keep xvfb available
#   in case the browser switches to non‚Äëheadless due to flags in the future.
# =============================================================================

name: E2E Smoke Test

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: e2e-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # -----------------------------------------------------------------------
      # 0.  Banner
      # -----------------------------------------------------------------------
      - name: "üîî  Begin End‚Äëto‚ÄëEnd smoke test"
        run: echo "üëâ  Starting E2E browser launch smoke test ‚Ä¶"

      # -----------------------------------------------------------------------
      # 1.  Checkout repository
      # -----------------------------------------------------------------------
      - name: "‚¨áÔ∏è  Checkout code"
        uses: actions/checkout@v4

      # -----------------------------------------------------------------------
      # 2.  Install Python
      # -----------------------------------------------------------------------
      - name: "üêç  Set up Python 3.12"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # -----------------------------------------------------------------------
      # 3.  Cache pip downloads
      # -----------------------------------------------------------------------
      - name: "üì¶  Cache pip"
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            pip-e2e-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      # -----------------------------------------------------------------------
      # 4.  Install package (editable mode + dev extras)
      # -----------------------------------------------------------------------
      - name: "üì•  Install GPT‚ÄëReview"
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      # -----------------------------------------------------------------------
      # 5.  Install Google Chrome Stable
      # -----------------------------------------------------------------------
      - name: "üåê  Set up Chrome"
        id: chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: "üîç  Record CHROME_BIN for the run"
        run: |
          echo "CHROME_BIN=${{ steps.chrome.outputs.chrome-path }}" >> "$GITHUB_ENV"
          echo "Detected Chrome path:"
          echo "  ${{ steps.chrome.outputs.chrome-path }}"
          "${{ steps.chrome.outputs.chrome-path }}" --version

      # Extract Chrome version for cache key (more reliable than relying on action outputs)
      - name: "üî¢  Extract Chrome version"
        id: chromever
        run: |
          ver="$("${{ steps.chrome.outputs.chrome-path }}" --version | grep -Eo '[0-9.]+' | head -n1)"
          echo "ver=$ver" >> "$GITHUB_OUTPUT"
          echo "Chrome version resolved: $ver"

      # -----------------------------------------------------------------------
      # 6.  Cache webdriver-manager artifacts (~/.wdm)
      # -----------------------------------------------------------------------
      - name: "üíæ  Cache webdriver-manager"
        uses: actions/cache@v4
        with:
          path: ~/.wdm
          key: wdm-${{ runner.os }}-${{ steps.chromever.outputs.ver }}
          restore-keys: |
            wdm-${{ runner.os }}-

      # -----------------------------------------------------------------------
      # 7.  (Optional) Xvfb for safety ‚Äì not strictly required for headless=new
      # -----------------------------------------------------------------------
      - name: "üñ•Ô∏è  Install Xvfb"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends xvfb

      # -----------------------------------------------------------------------
      # 8.  Launch Selenium in headless mode (with retry) and write Job Summary
      # -----------------------------------------------------------------------
      - name: "üöÄ  Start headless browser via selenium (with retry + summary)"
        env:
          GPT_REVIEW_HEADLESS: "1"      # force headless=new in the driver
          CHROME_BIN: "${{ steps.chrome.outputs.chrome-path }}"
        run: |
          echo "::group::Python smoke test script"
          xvfb-run -a python - <<'PY'
          import logging, os, platform, sys, time
          from review import _chrome_driver

          logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
          MAX_ATTEMPTS = 3
          BACKOFF_SECS = 5

          def attempt_launch():
              last = None
              for attempt in range(1, MAX_ATTEMPTS + 1):
                  try:
                      logging.info("Launching browser (attempt %d/%d)‚Ä¶", attempt, MAX_ATTEMPTS)
                      drv = _chrome_driver()
                      return drv
                  except Exception as exc:
                      last = exc
                      logging.exception("Launch attempt %d failed: %s", attempt, exc)
                      if attempt < MAX_ATTEMPTS:
                          time.sleep(BACKOFF_SECS * attempt)
              raise last

          try:
              drv = attempt_launch()
              caps = getattr(drv, "capabilities", {}) or {}
              browser_version = caps.get("browserVersion", "unknown")
              chrome_block = caps.get("chrome", {}) if isinstance(caps, dict) else {}
              driver_version = (chrome_block.get("chromedriverVersion", "unknown").split(" ") or ["unknown"])[0]

              drv.get("https://www.example.com")
              title = drv.title
              logging.info("Page title fetched successfully: %s", title)

              # Write a compact Job Summary
              summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
              if summary_path:
                  with open(summary_path, "a", encoding="utf-8") as fh:
                      fh.write("### Selenium E2E summary\\n\\n")
                      fh.write(f"- **OS**: `{platform.platform()}`\\n")
                      fh.write(f"- **Python**: `{platform.python_version()}`\\n")
                      fh.write(f"- **Chrome path**: `{os.environ.get('CHROME_BIN', '<unknown>')}`\\n")
                      fh.write(f"- **Chrome version**: `{browser_version}`\\n")
                      fh.write(f"- **Chromedriver version**: `{driver_version}`\\n")
                      fh.write(f"- **Fetched title**: `{title}`\\n")

              drv.quit()
              logging.info("‚úÖ  Selenium smoke test passed")
          except Exception as exc:
              logging.exception("‚ùå  Selenium smoke test failed: %s", exc)
              sys.exit(1)
          PY
          echo "::endgroup::"

      # -----------------------------------------------------------------------
      # 9.  Success banner
      # -----------------------------------------------------------------------
      - name: "‚úÖ  E2E smoke test finished"
        run: echo "üéâ  Browser layer looks good!"
