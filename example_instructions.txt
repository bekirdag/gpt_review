===============================================================================
ðŸŽ¯  PROJECT GOAL
===============================================================================
Modernise the codeâ€‘base for **PythonÂ 3.12**, achieve **â‰¥â€¯90â€¯% pytest coverage**,
and eliminate all `DeprecationWarning`s.

Required migrations / cleanups:
  â€¢ `flask.ext.*`              â†’ replace with standalone packages
  â€¢ `asyncio.get_event_loop`   â†’ prefer `asyncio.run(...)`
  â€¢ Any `asyncio.coroutine`    â†’ native `async def`
  â€¢ Remove / silence outdated APIs flagged by PythonÂ 3.12

CI target in `.github/workflows/ci.yml` **must** pass green with:
  python-version: ["3.10", "3.11", "3.12"]

-------------------------------------------------------------------------------
âœ…  ACCEPTANCE CRITERIA
-------------------------------------------------------------------------------
1) `pytest -q` reports **â‰¥â€¯90â€¯% coverage**.
2) Zero warnings under **PythonÂ 3.12**.
3) `flake8` passes with **zero** errors or warnings.
4) All existing CLI commands keep identical behaviour (BCâ€‘safe).

-------------------------------------------------------------------------------
ðŸ§­  SCOPE & CONSTRAINTS
-------------------------------------------------------------------------------
â€¢ Keep changes **as small as possible** per patch; do not reformat unrelated files.
â€¢ Prefer minimal, targeted refactors that quiet 3.12 warnings.
â€¢ When introducing new deps, pin minimally (PEPÂ 440 compatible) and explain why.
â€¢ If a test is flaky or heavy, mark it appropriately (`pytest.mark.*`) with rationale.

-------------------------------------------------------------------------------
ðŸ“‹  WORKFLOW RULES
-------------------------------------------------------------------------------
You will work **one file at a time** in a chunkâ€‘byâ€‘chunk loop.

After each patch you send:
  1) You **must** ask me to **continue** before proceeding.
  2) Wait for logs I may send back; use those to propose the next fix.

**Important output rule**  
Return **exactly one JSON object** (no extra prose, no markdown/code fences).
Use `"status": "in_progress"` until the **last** patch, then `"status": "completed"`.

-------------------------------------------------------------------------------
ðŸ§±  REPLY FORMAT (RAW JSON â€“ no fences)
-------------------------------------------------------------------------------
The single JSON object you return must conform to this schema:

{
  "op": "create|update|delete|rename|chmod",
  "file": "path/inside/repo",

  // create / update (choose exactly one of body or body_b64)
  "body": "full utfâ€‘8 file contents",
  "body_b64": "<base64-encoded-bytes>",

  // rename (when op = rename)
  "target": "new/path",

  // chmod (when op = chmod)
  "mode": "755",

  // session progression
  "status": "in_progress|completed"
}

Notes:
â€¢ For **binary** files, use `"body_b64"`; for **text** files, use `"body"`.
â€¢ Paths are **relative to the repository root**. Do not escape the repo.
â€¢ Send only **one** JSON object per reply. No surrounding backticks or prose.

-------------------------------------------------------------------------------
ðŸ§ª  HINTS
-------------------------------------------------------------------------------
â€¢ If the tests fail, I will paste the **full failing logs**. Use them to craft
  the next minimal patch.
â€¢ Prefer safe, incremental fixes. Remove dead code if it blocks progress.
â€¢ If an API replacement affects multiple files, split into small sequential patches.

-------------------------------------------------------------------------------
ðŸ”š  EXAMPLE (for illustration only â€” DO NOT include fences in your replies)
-------------------------------------------------------------------------------
{
  "op": "update",
  "file": "src/util/time.py",
  "body": "from __future__ import annotations\n\nimport asyncio\n\nasync def _main():\n    ...\n\nif __name__ == \"__main__\":\n    asyncio.run(_main())\n",
  "status": "in_progress"
}
